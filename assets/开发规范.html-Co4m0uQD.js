import{_ as a,c as o,a as i,o as n}from"./app-CeA8JgzT.js";const l={};function s(r,e){return n(),o("div",null,e[0]||(e[0]=[i('<h1 id="开发规范" tabindex="-1"><a class="header-anchor" href="#开发规范"><span>开发规范</span></a></h1><hr><h2 id="一、前后端代码规范" tabindex="-1"><a class="header-anchor" href="#一、前后端代码规范"><span>一、前后端代码规范</span></a></h2><h3 id="_1-命名规范" tabindex="-1"><a class="header-anchor" href="#_1-命名规范"><span>1. 命名规范</span></a></h3><ul><li><strong>Java/SpringBoot</strong>：采用驼峰命名，类名首字母大写（如<code>VehicleController</code>），变量/方法首字母小写（如<code>getVehicleInfo</code>）。</li><li><strong>JavaScript/Vue/UniApp</strong>：同样采用驼峰命名，组件文件首字母大写（如<code>VehicleList.vue</code>），变量/方法同上。</li><li><strong>常用缩写统一</strong>：如 ID、URL 等全大写，避免混用。</li></ul><h3 id="_2-注释与文档" tabindex="-1"><a class="header-anchor" href="#_2-注释与文档"><span>2. 注释与文档</span></a></h3><ul><li>重要类、方法、接口必须添加 Javadoc（Java）或 JSDoc（JS）。</li><li>复杂逻辑、特殊分支必须有行内注释，禁止“自解释”省略。</li><li>组件/模块必须有头部注释说明功能、作者、修改历史。</li></ul><h3 id="_3-分层结构" tabindex="-1"><a class="header-anchor" href="#_3-分层结构"><span>3. 分层结构</span></a></h3><ul><li>后端项目严格分层：<code>controller</code>（接口）、<code>service</code>（业务）、<code>repository</code>（持久化）、<code>model</code>（实体）、<code>config</code>（配置）。</li><li>前端采用“页面-组件-服务-工具”结构，<code>pages/</code>为页面、<code>components/</code>为复用组件、<code>services/</code>为 API 封装、<code>utils/</code>为通用工具。</li></ul><h4 id="归档要点" tabindex="-1"><a class="header-anchor" href="#归档要点"><span>归档要点</span></a></h4><ul><li>代码仓库须有<code>README.md</code>、分层结构图和主要模块注释示例。</li></ul><hr><h2 id="二、接口与文档规范" tabindex="-1"><a class="header-anchor" href="#二、接口与文档规范"><span>二、接口与文档规范</span></a></h2><ul><li><strong>RESTful API 风格</strong>：动词用 HTTP 方法表示，资源用复数名词，如<code>GET /api/vehicles</code>、<code>POST /api/charge/start</code>。</li><li><strong>参数与响应标准</strong>：所有接口返回统一数据结构（如<code>code</code>、<code>msg</code>、<code>data</code>），错误码与消息清晰、标准化。</li><li><strong>接口文档</strong>：必须通过 Swagger/OpenAPI 或 Apifox 自动生成，接口参数、类型、权限、响应例子必不可少。</li><li><strong>版本管理</strong>：接口变更需版本号标识（如<code>/api/v1/</code>），禁止无声明变更。</li></ul><h4 id="归档要点-1" tabindex="-1"><a class="header-anchor" href="#归档要点-1"><span>归档要点</span></a></h4><ul><li>接口文档每迭代归档一次，保留变更日志和测试用例示例。</li></ul><hr><h2 id="三、前端组件与页面开发规范" tabindex="-1"><a class="header-anchor" href="#三、前端组件与页面开发规范"><span>三、前端组件与页面开发规范</span></a></h2><ul><li><strong>组件化</strong>：页面拆分为小型功能组件，禁止冗余重复代码。所有复用区块（如车辆卡片、地图弹窗等）提炼为组件，归档<code>/components</code>。</li><li><strong>样式统一</strong>：采用预处理器（SCSS/LESS），全局变量管理品牌色、字体、圆角、阴影。</li><li><strong>页面命名</strong>：<code>kebab-case</code>风格（如<code>vehicle-list.vue</code>），与路由一致。</li><li><strong>数据流</strong>：推荐组合式 API（Vue3），状态管理用 Pinia 或 Vuex，避免全局变量污染。</li><li><strong>API 抽象</strong>：前端请求封装统一在<code>services/</code>目录，便于后期维护和 Mock 切换。</li><li><strong>UI 一致性</strong>：严格按照 UI 规范设计稿，按钮、输入、反馈、状态风格一致。</li></ul><h4 id="归档要点-2" tabindex="-1"><a class="header-anchor" href="#归档要点-2"><span>归档要点</span></a></h4><ul><li>所有主要组件、页面须有使用说明与代码示例，归档样例与版本。</li></ul><hr><h2 id="四、git-分支、提交规范与团队协作流程" tabindex="-1"><a class="header-anchor" href="#四、git-分支、提交规范与团队协作流程"><span>四、Git 分支、提交规范与团队协作流程</span></a></h2><ul><li><strong>分支模型</strong>：采用 GitFlow 或 trunk-based，主分支（<code>main</code>/<code>master</code>）只合并经过测试的 release 分支，开发分支按模块/任务命名（如<code>feature/charge-module</code>、<code>bugfix/vehicle-api</code>）。</li><li><strong>提交规范</strong>：Commit message 采用 <a href="https://www.conventionalcommits.org/" target="_blank" rel="noopener noreferrer">Conventional Commits</a> 标准，如<code>feat: 新增车辆绑定接口</code>、<code>fix: 修复充电桩状态同步bug</code>。</li><li><strong>合并流程</strong>：强制 PR（Pull Request）评审，至少 1 人 Code Review 后再合并主分支。</li><li><strong>CI/CD 集成</strong>：每次提交自动化检查、测试与构建，主分支通过所有测试后方可上线。</li><li><strong>冲突处理</strong>：分支合并前强制本地 rebase，解决冲突后再推送。</li></ul><h4 id="归档要点-3" tabindex="-1"><a class="header-anchor" href="#归档要点-3"><span>归档要点</span></a></h4><ul><li>团队开发手册、分支与提交示例归档，定期评审和优化协作流程。</li></ul><hr><h2 id="五、lint-工具、格式化和自动化检查" tabindex="-1"><a class="header-anchor" href="#五、lint-工具、格式化和自动化检查"><span>五、Lint 工具、格式化和自动化检查</span></a></h2><ul><li><strong>后端</strong>：采用 CheckStyle、SpotBugs、PMD（Java）；统一 IDE 格式化风格。</li><li><strong>前端</strong>：ESLint（JS/TS）、StyleLint（CSS/SCSS），Prettier 格式化，统一代码风格。</li><li><strong>自动化集成</strong>：CI 流程中集成 Lint 和单元测试，不通过不得合并代码。</li><li><strong>Git Hooks</strong>：推荐使用 Husky/commitlint 等工具，提交前自动校验。</li></ul><h4 id="归档要点-4" tabindex="-1"><a class="header-anchor" href="#归档要点-4"><span>归档要点</span></a></h4><ul><li>Lint、格式化、自动检查配置文件与检查报告归档，CI 流程文档同步迭代。</li></ul><hr><h2 id="六、安全编码与防护要点" tabindex="-1"><a class="header-anchor" href="#六、安全编码与防护要点"><span>六、安全编码与防护要点</span></a></h2><ul><li><strong>输入校验</strong>：所有用户输入后端严格校验、前端实时反馈，防止 SQL 注入、XSS、CSRF 等常见攻击。</li><li><strong>密码与敏感数据</strong>：采用强加密算法（如 BCrypt），敏感信息只用 HTTPS 传输，接口避免明文返回。</li><li><strong>权限验证</strong>：每个接口都需认证校验，禁止未授权访问。后端业务层进行二次校验，防止越权。</li><li><strong>依赖更新</strong>：所有三方库定期扫描漏洞（如 Dependabot、npm audit），及时升级修复。</li></ul><h4 id="归档要点-5" tabindex="-1"><a class="header-anchor" href="#归档要点-5"><span>归档要点</span></a></h4><ul><li>安全测试报告、敏感数据保护措施、漏洞修复记录归档留存。</li></ul><hr><h2 id="七、代码归档与版本管理策略" tabindex="-1"><a class="header-anchor" href="#七、代码归档与版本管理策略"><span>七、代码归档与版本管理策略</span></a></h2><ul><li><strong>源码托管</strong>：统一用 Git（GitHub、Gitee 或企业 GitLab），代码按模块分仓或 monorepo 统一管理。</li><li><strong>版本标签</strong>：每次稳定版本发布须打 tag，语义化版本号（如 v1.2.3）。</li><li><strong>归档资料</strong>：每次大版本归档项目结构、配置、依赖、说明文档、主要变更。</li><li><strong>归档安全</strong>：代码库至少每周备份一次，重要分支长期存档，权限最小化。</li></ul>',39)]))}const c=a(l,[["render",s]]),d=JSON.parse('{"path":"/development/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html","title":"开发规范","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752849335000,"contributors":[{"name":"mqxu","username":"mqxu","email":"moqi1977@gmail.com","commits":1,"url":"https://github.com/mqxu"}],"changelog":[{"hash":"af37f38c248b743a0fbb96095eaa9b8b46b743f9","time":1752849335000,"email":"moqi1977@gmail.com","author":"mqxu","message":"feat: 初始化文档站"}]},"filePathRelative":"development/开发规范.md"}');export{c as comp,d as data};
